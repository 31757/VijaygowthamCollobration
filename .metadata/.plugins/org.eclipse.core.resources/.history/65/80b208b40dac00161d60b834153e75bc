package com.vanuchat.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import com.vanuchat.service.CategoryService;
import com.vanuchat.service.JobService;

@Controller
public class JobController {
	@Autowired
	JobService ps;

	@Autowired
	CategoryService cs;
	
	@RequestMapping("/product")
	public ModelAndView product() {
		ModelAndView mav = new ModelAndView("product");

		List<Product> list = ps.ListProduct();
		
		JSONArray jarr = new JSONArray();
		
		for( Product p1 : list )
		{
			JSONObject jobj = new JSONObject();
			
			jobj.put("ProductId", p1.getId());
			jobj.put("ProductName", p1.getProductName());
			jobj.put("ProductDescription", p1.getProductDescription());
			jobj.put("ProductCategory", p1.getProductCategory());
			jobj.put("ProductPrice", p1.getProductPrice());
			jobj.put("ProductQuantity", p1.getProductQuantity());
			jobj.put("ProductImage", p1.getProductImage());
			
			
			jarr.add(jobj);
		}
		
		System.out.println(jarr.toJSONString());
		
		mav.addObject("JSONData", jarr.toJSONString());
		
		return mav;

	}

	
	@RequestMapping("/addproduct")
	public ModelAndView addproduct() {
		ModelAndView mav = new ModelAndView("addproduct");
		mav.addObject("Product", new Product());
		mav.addObject("Categories",cs.ListCategory());
		
		return mav;

	}

	@RequestMapping(value = "/AddProductToDB", method = RequestMethod.POST)
	public ModelAndView AddProductToDB(@ModelAttribute("Product") Product p, BindingResult bind) {
		ModelAndView mav = new ModelAndView("product");
		ps.insert(p);
		
		Product pi = ps.getProductWithMaxId();
		
		//
		
		try
		{
			String path = context.getRealPath("/");
	        
	        System.out.println(path);
	        
	        File directory = null;
	        
	        if (p.getProductFile().getContentType().contains("image"))
	        {
	        	directory = new File(path + "/resources/images");
	        	
	        	System.out.println(directory);
	        	
	        	byte[] bytes = null;
	            File file = null;
	            bytes = p.getProductFile().getBytes();
	            
	            if (!directory.exists()) directory.mkdirs();
	            
	            file = new File(directory.getAbsolutePath() + System.getProperty("file.separator") + "image_" + pi.getId() + ".jpg");
	            
	            System.out.println(file.getAbsolutePath());
	            
	            BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(file));
	            stream.write(bytes);
	            stream.close();
	            
	            pi.setProductImage("resources/images/image_" + pi.getId() + ".jpg");
	            
	            ps.update(pi);
	        }
		}
		catch( Exception e )
		{
			e.printStackTrace();
		}
		
		//
		
		List<Product> list = ps.ListProduct();
		
		JSONArray jarr = new JSONArray();
		
		for( Product p1 : list )
		{
			JSONObject jobj = new JSONObject();
			
			jobj.put("ProductId", p1.getId());
			jobj.put("ProductName", p1.getProductName());
			jobj.put("ProductDescription", p1.getProductDescription());
			jobj.put("ProductCategory", p1.getProductCategory());
			jobj.put("ProductPrice", p1.getProductPrice());
			jobj.put("ProductQuantity", p1.getProductQuantity());
			jobj.put("ProductImage", p1.getProductImage());
			
			
			jarr.add(jobj);
		}
		
		System.out.println(jarr.toJSONString());
		
		mav.addObject("JSONData", jarr.toJSONString());
		

		return mav;
	}

}
