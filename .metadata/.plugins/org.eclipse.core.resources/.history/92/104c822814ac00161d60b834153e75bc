package com.vanuchat.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;
import org.json.simple.parser.JSONParser;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.util.UriComponentsBuilder;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.util.List;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import com.vanuchat.service.CategoryService;
import com.vanuchat.service.JobService;
import com.vanuchat.model.*;
import com.vanuchat.service.*;

@Controller
public class JobController {
	@Autowired
	JobService ps;

	@Autowired
	CategoryService cs;
	
	@SuppressWarnings("unchecked")
	@RequestMapping("/Job")
	public ModelAndView Job() {
		ModelAndView mav = new ModelAndView("Job");

		List<Job> list = ps.ListJob();
		
		JSONArray jarr = new JSONArray();
		
		for( Job p1 : list )
		{
			JSONObject jobj = new JSONObject();
			
			jobj.put("JobId", p1.getId());
			jobj.put("JobName", p1.getJobName());
			jobj.put("JobDescription", p1.getJobDescription());
			jobj.put("JobCategory", p1.getJobCategory());
			jobj.put("JobPrice", p1.getJobSalary());
			jobj.put("JobQuantity", p1.getJobQuantity());
			jobj.put("JobImage", p1.getJobImage());
			
			
			jarr.add(jobj);
		}
		
		System.out.println(jarr.toJSONString());
		
		mav.addObject("JSONData", jarr.toJSONString());
		
		return mav;

	}

	
	@RequestMapping("/addJob")
	public ModelAndView addJob() {
		ModelAndView mav = new ModelAndView("addJob");
		mav.addObject("Job", new Job());
		mav.addObject("Categories",cs.ListCategory());
		
		return mav;

	}

	@RequestMapping(value = "/AddJobToDB", method = RequestMethod.POST)
	public ModelAndView AddJobToDB(@ModelAttribute("Job") Job p, BindingResult bind) {
		ModelAndView mav = new ModelAndView("Job");
		ps.insert(p);
		
		Job pi = ps.getJobWithMaxId();
		
		//
		
		try
		{
			String path = context.getRealPath("/");
	        
	        System.out.println(path);
	        
	        File directory = null;
	        
	        if (p.getJobFile().getContentType().contains("image"))
	        {
	        	directory = new File(path + "/resources/images");
	        	
	        	System.out.println(directory);
	        	
	        	byte[] bytes = null;
	            File file = null;
	            bytes = p.getJobFile().getBytes();
	            
	            if (!directory.exists()) directory.mkdirs();
	            
	            file = new File(directory.getAbsolutePath() + System.getProperty("file.separator") + "image_" + pi.getId() + ".jpg");
	            
	            System.out.println(file.getAbsolutePath());
	            
	            BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(file));
	            stream.write(bytes);
	            stream.close();
	            
	            pi.setJobImage("resources/images/image_" + pi.getId() + ".jpg");
	            
	            ps.update(pi);
	        }
		}
		catch( Exception e )
		{
			e.printStackTrace();
		}
		
		//
		
		List<Job> list = ps.ListJob();
		
		JSONArray jarr = new JSONArray();
		
		for( Job p1 : list )
		{
			JSONObject jobj = new JSONObject();
			
			jobj.put("JobId", p1.getId());
			jobj.put("JobName", p1.getJobName());
			jobj.put("JobDescription", p1.getJobDescription());
			jobj.put("JobCategory", p1.getJobCategory());
			jobj.put("JobPrice", p1.getJobPrice());
			jobj.put("JobQuantity", p1.getJobQuantity());
			jobj.put("JobImage", p1.getJobImage());
			
			
			jarr.add(jobj);
		}
		
		System.out.println(jarr.toJSONString());
		
		mav.addObject("JSONData", jarr.toJSONString());
		

		return mav;
	}

}
